pipeline {
  agent {
    kubernetes {
      yaml '''
        apiVersion: v1
        kind: Pod
        spec:
          containers:
          - name: docker
            image: docker:latest
            command:
            - cat
            tty: true
            volumeMounts:
             - mountPath: /var/run/docker.sock
               name: docker-sock
          volumes:
          - name: docker-sock
            hostPath:
              path: /var/run/docker.sock
        '''
    }
  }
  stages {
    stage('Build Database') {
      steps {
        container('docker') {
          sh '''
            cd CDDBAPI/Database
            reg=`nslookup registry-int.docker-registry.svc.cluster.local | grep Address | tail -1 | awk '{print \$2}'`
            if ! docker build -t registry-int.docker-registry:5000/devdb:v\${BUILD_NUMBER} .
            then
              if ! docker build -t \${reg}:5000/devdb:v\${BUILD_NUMBER} .
              then
                echo "[FAILED]"
                exit 1
              fi
            fi
          '''
        }
      }
    }
    stage('Build API') {
      steps {
        container('docker') {
          sh '''
            cd CDDBAPI/Python
            reg=`nslookup registry-int.docker-registry.svc.cluster.local | grep Address | tail -1 | awk '{print \$2}'`
            if ! docker build -t registry-int.docker-registry:5000/devapi:v\${BUILD_NUMBER} .
            then
              if ! docker build -t \${reg}:5000/devapi:v\${BUILD_NUMBER} .
              then
                echo "[FAILED]"
                exit 1
              fi
            fi
          '''
        }
      }
    }
    stage('Build DB Updater') {
      steps {
        container('docker') {
          sh '''
            cd CDDBAPI/Python
            reg=`nslookup registry-int.docker-registry.svc.cluster.local | grep Address | tail -1 | awk '{print \$2}'`
            if ! docker build -f Dockerfile-dbupdate -t registry-int.docker-registry:5000/devdbupdater:v\${BUILD_NUMBER} .
            then
              if ! docker build -f Dockerfile-dbupdate -t \${reg}:5000/devdbupdater:v\${BUILD_NUMBER} .
              then
                echo "[FAILED]"
                exit 1
              fi
            fi
          '''
        }
      }
    }
    stage('Launch Test Environment') {
      steps{
        container('docker') {
          sh '''
            reg=`nslookup registry-int.docker-registry.svc.cluster.local | grep Address | tail -1 | awk '{print \$2}'`
            if ! docker run --rm -d --name devdb-v\${BUILD_NUMBER} registry-int.docker-registry:5000/devdb:v\${BUILD_NUMBER}
            then
              if ! docker run --rm -d --name devdb-v\${BUILD_NUMBER} \${reg}:5000/devdb:v\${BUILD_NUMBER}
              then
                exit 2
              fi
            fi

            mkdir denv
            echo "DBUSER=root
DBPASS=secret123
DBSRV=cddb:3306" >denv/.env

            if ! docker run --rm -d -v ./denv:/app/env --link devdb-v\${BUILD_NUMBER}:cddb --name devapi-v\${BUILD_NUMBER} registry-int.docker-registry:5000/devapi:v\${BUILD_NUMBER}
            then
              if ! docker run --rm -d -v ./denv:/app/env --link devdb-v\${BUILD_NUMBER}:cddb --name devapi-v\${BUILD_NUMBER} \${reg}:5000/devapi:v\${BUILD_NUMBER}
              then
                docker rmi registry-int.docker-registry:5000/devdb:v\${BUILD_NUMBER}
                docker rmi registry-int.docker-registry:5000/devapi:v\${BUILD_NUMBER}
                docker rmi registry-int.docker-registry:5000/devdbupdater:v\${BUILD_NUMBER}
                docker rm -f devdb-v\${BUILD_NUMBER}
                exit 2
              fi
            fi
            # Check api is up
            if docker ps -a | grep registry-int | grep devapi | grep Exit
            then
              echo "Failed to start API"
              docker logs devapi-v\${BUILD_NUMBER}
              exit 2
            fi
            if ! docker run --rm -d -v ./denv:/app/env -P --link devdb-v\${BUILD_NUMBER}:cddb registry-int.docker-registry:5000/devdbupdater:v\${BUILD_NUMBER}
            then
              if ! docker run --rm -d -v ./denv:/app/env -P --link devdb-v\${BUILD_NUMBER}:cddb \${reg}:5000/devdbupdater:v\${BUILD_NUMBER}
              then
                docker rmi registry-int.docker-registry:5000/devdb:v\${BUILD_NUMBER}
                docker rmi registry-int.docker-registry:5000/devapi:v\${BUILD_NUMBER}
                docker rmi registry-int.docker-registry:5000/devdbupdater:v\${BUILD_NUMBER}
                docker rm -f devdb-v\${BUILD_NUMBER}
                docker rm -f devapi-v\${BUILD_NUMBER}
              fi
            fi
          '''
        }
      }
    }
    stage('Run tests') {
      steps {
        container('docker') {
          sh '''
            testpass=0
            testfail=0
            echo "Doing some tests"
            # Get API port for testing
            docker ps -a | grep registry-int
            apiport=\$(docker port devapi-v\${BUILD_NUMBER} | grep '8080/tcp' | sed 's/^.*://')
            apiip=\$( docker inspect cdapi | grep IPAddress | tail -1 | awk '{print \$2}' | sed 's/[",]//g' )
            if curl \${apiip}:\${apiport} 2>/dev/null | grep Hello  >/dev/null 2>&1
            then
              echo "[PASS] Top URL"
              testpass=1
            else
              echo "[FAIL] Top URL"
              testfail=1
            fi

            if curl \${apiip}:\${apiport}/api/cds 2>/dev/null | grep Invisible >/dev/null 2>&1
            then
              echo "[PASS] CD listing"
              testpass=2
            else
              echo "[FAIL] CD listing"
              testfail=2
            fi
          '''
        }
      }
    }
    stage('Publish images') {
      steps {
        container('docker') {
          sh '''
            reg=`nslookup registry-int.docker-registry.svc.cluster.local | grep Address | tail -1 | awk '{print \$2}'`
            pushfail=0
            ippush=0
            if ! docker push registry-int.docker-registry:5000/devdb:v\${BUILD_NUMBER}
            then
              docker tag registry-int.docker-registry:5000/devdb:v\${BUILD_NUMBER} \${reg}:5000/devdb:v\${BUILD_NUMBER}
              if ! docker push \${reg}:5000/devdb:v\${BUILD_NUMBER}
              then
                pushfail=1
              else
                ippush=1
              fi
            fi
            if ! docker push registry-int.docker-registry:5000/devapi:v\${BUILD_NUMBER}
            then
              docker tag registry-int.docker-registry:5000/devapi:v\${BUILD_NUMBER} \${reg}:5000/devapi:v\${BUILD_NUMBER}
              if ! docker push \${reg}:5000/devapi:v\${BUILD_NUMBER}
              then
                pushfail=2
              fi
            fi
            if ! docker push registry-int.docker-registry:5000/devdbupdater:v\${BUILD_NUMBER}
            then
              docker tag registry-int.docker-registry:5000/devdbupdater:v\${BUILD_NUMBER} \${reg}:5000/devdbupdater:v\${BUILD_NUMBER}
              if ! docker push \${reg}:5000/devdbupdater:v\${BUILD_NUMBER}
              then
                pushfail=3
              fi
            fi

            echo "Clean up"
            docker rm -f devapi-v\${BUILD_NUMBER}
            docker rm -f devdb-v\${BUILD_NUMBER}
            docker rm -f devdbupdater-v\${BUILD_NUMBER}
            if [ "$ippush" -eq "0" ]
            then
              for imgs in registry-int.docker-registry:5000/devdb:v\${BUILD_NUMBER} registry-int.docker-registry:5000/devapi:v\${BUILD_NUMBER} registry-int.docker-registry:5000/devdbupdater:v\${BUILD_NUMBER}
              do
                docker rmi \$imgs
              done
            fi
            if [ "$ippush" -gt "0" ]
            then
              for imgs in \${reg}:5000/devdb:v\${BUILD_NUMBER} \${reg}:5000/devapi:v\${BUILD_NUMBER} \${reg}:5000/devdbupdater:v\${BUILD_NUMBER}
              do
                docker rmi \$imgs
              done
            fi
            echo "FAILED: \${pushfail}"
            exit \${pushfail}
          '''
        }
      }
    }
  }
}